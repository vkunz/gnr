<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article role="webpage">
	<articleinfo>
	<date>09.10.2008</date>
		<author>
			<surname>Kracht</surname>
			<firstname>Patrick</firstname>
		</author>
	</articleinfo>
	<section>
		<title>Vorschau</title>
		<para>Hier kann die Entwicklung unseres Programms vom ersten Byte bis zum aktuellen 
		Stand verfolgt werden. Begonnen haben wir mit einer optischen Vorlage durch das
		OpenSource Java-Programm "Home Sweet 3D" von <ulink url="http://sweethome3d.sourceforge.net/download.html">eTeks</ulink>,
		das uns eine grober Vorstellung von der geforderten Oberfläche verschafft.
		<ulink url="http://www.hs-ulm.de/upload/rlunde/projti5/Team1/_downloads/vorbild.jpg">Abb.1</ulink></para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="_images/vorbild_small.img?s=200" align="left" />
			</imageobject>
			<caption>
				<para>Abb.1: Das Vorbild: "Home Sweet 3D"</para>
			</caption>
		</mediaobject>
		<para>Die ersten Schritte mit wxWidgets ermöglichen schon eine kleine
		minimalistische GUI. Der erste Grundstein für unser Projekt ist gelegt.
		<ulink url="http://www.hs-ulm.de/upload/rlunde/projti5/Team1/_downloads/prototyp_0.jpg">Abb.2</ulink></para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="_images/prototyp_0_small.img?s=200" align="left" />
			</imageobject>
			<caption>
				<para>Abb.2: Der erste Prototyp - die GUI</para>
			</caption>
		</mediaobject>
		<para>Die ersten Tests mit dem GLCanvas. Die Objekte erscheinen noch
		etwas dimensionslos, da Licht und Schatten noch Fremdwörter sind.
		<ulink url="http://www.hs-ulm.de/upload/rlunde/projti5/Team1/_downloads/prototyp_1.jpg">Abb.3</ulink></para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="_images/prototyp_1_small.img?s=200" align="left" />
			</imageobject>
			<caption>
				<para>Abb.3: Die erste OpenGL-Canvas</para>
			</caption>
		</mediaobject>
		<para>Das wxGLCanvas bietet schon die Möglichkeit 3D-Formen darzustellen. Hier
		ein kleiner Prototyp mit einer bunten Pyramide, wobei die beiden Frames noch
		für sich stehen. Die nächste Version sollte den sogenannten Shared Context Modus
		unterstützen.
		<ulink url="http://www.hs-ulm.de/upload/rlunde/projti5/Team1/_downloads/prototyp_2.jpg">Abb.4</ulink></para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="_images/prototyp_2_small.img?s=200" align="left" />
			</imageobject>
			<caption>
				<para>Abb.4: Erste Anzeige - wxGLCanvas</para>
			</caption>
		</mediaobject>
		<para>Der OBJ-Importer funktioniert schon einmal rudimentär. Wie im Screenshot 
		(hoffentlich) zu erkennen ist, wurde hier ein iMac im OBJ-Format importiert und
		zerlegt. Das obere Frame zeigt die Ansicht von oben, das untere die 3D-Darstellung.
		<ulink url="http://www.hs-ulm.de/upload/rlunde/projti5/Team1/_downloads/prototyp_3.jpg">Abb.5</ulink></para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="_images/prototyp_3_small.img?s=200" align="left" />
			</imageobject>
			<caption>
				<para>Abb.5: OBJ-Import funktioniert</para>
			</caption>
		</mediaobject>
		<para>Es werde Licht! Endlich klappt der OBJ-Import mit Normalen reibungslos (sofern
		die Normalen angegeben sind - falls nicht, müssen sie noch berechnet werden). Auch
		von der Performance sind wir restlos begeistert: Die F18_Hornet.obj mit 7.5MB lädt
		in ein paar Sekunden und wird auch flüssig dargestellt.
		<ulink url="http://www.hs-ulm.de/upload/rlunde/projti5/Team1/_downloads/prototyp_4.jpg">Abb.6</ulink></para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="_images/prototyp_4_small.img?s=200" align="left" />
			</imageobject>
			<caption>
				<para>Abb.6: Licht und Schatten</para>
			</caption>
		</mediaobject>
		<para>Die Oberflächen-Informationen werden jetzt (fast) immer korrekt eingelesen. Auch
		das Berechnen der Normalen (falls keine im OBJ angegeben waren) funktioniert schon recht gut.
		Das Beispiel zeigt schon die aktuellen Möglichkeiten, wie man Räume einrichten könnte, jedoch
		ohne Kollisionserkennung und Skalierung. Alle Objekte werden auf die Standardgröße 1 normiert.
		<ulink url="http://www.hs-ulm.de/upload/rlunde/projti5/Team1/_downloads/prototyp_5.jpg">Abb.7</ulink></para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="_images/prototyp_5_small.img?s=200" align="left" />
			</imageobject>
			<caption>
				<para>Abb.7: Normierte Objekte in Farbe</para>
			</caption>
		</mediaobject>
		<para>Die GUI hat sich bereits in großen Schritten der Oberfläche von Home Sweet 3D
		angenähert und bietet im Vergleich zur Vorgängerversion schon eine deutlich komfortablere
		Handhabung - insbesondere die Snap-to-Grid Funktion und die neue Steuerung der Kamera haben
		sich merklich verbessert. Die Menüstruktur hat sich auch um einige Punkte erweitert und wird
		voraussichtlich in der nächsten Woche ihr endgültiges Aussehen bekommen, sobald der Großteil
		der Anforderungen implementiert sind.
		<ulink url="http://www.hs-ulm.de/upload/rlunde/projti5/Team1/_downloads/prototyp_6.jpg">Abb.8</ulink></para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="_images/prototyp_6_small.img?s=200" align="left" />
			</imageobject>
			<caption>
				<para>Abb.8: Immer mehr Funktionen</para>
			</caption>
		</mediaobject>
	</section>
</article>